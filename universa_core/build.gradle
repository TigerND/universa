group 'com.icodici'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    localDeps
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.18'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.9'
    //    compile group:'org.mapdb', name:'mapdb', version:'3.0.5'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.9.1'
    localDeps project(':common_tools')
    localDeps project(':contrib:nanohttpd')
    localDeps project(':crypto')
    compile configurations.localDeps

    processResources
    processTestResources
}

// Just build the class .jar itself
jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    archiveName = 'uninode.jar'

    manifest {
        attributes 'Main-Class': 'com.icodici.universa.node2.Main',
                'Class-Path': configurations.runtime.files.collect { "$it.name" }.join(' ')
    }
}

task buildMultiJar(type: Copy) {
    dependsOn build
    into "$buildDir/output"
    from configurations.runtime
    from jar
}


def configFilePath = "src/main/java/com/icodici/universa/node2"
def configTestFilePath = "src/test_config"
def configBackupFilePath = "config_backup"
def configFileName = "Config.java"


task testConfigRestore(type: Copy) {
    from "$buildDir/" + configBackupFilePath
    into configFilePath
    include configFileName
}

task buildMultiJarTestConfig(type: Task) {

    doFirst {
        copy {
            from configFilePath
            into "$buildDir/" + configBackupFilePath
            include configFileName
        }

        copy {
            from configTestFilePath
            into configFilePath
            include configFileName
        }
    }

    finalizedBy buildMultiJar
    buildMultiJar.finalizedBy testConfigRestore
}





task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar with all dependencies',
                'Implementation-Version': version,
                'Main-Class': 'com.icodici.universa.node2.Main'
    }
//    baseName = project.name + '-all'
    archiveName = 'uninode-all.jar'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    duplicatesStrategy 'exclude'
    zip64 true
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


task fatJarTestConfig(type: Task) {

    doFirst {
        copy {
            from configFilePath
            into "$buildDir/" + configBackupFilePath
            include configFileName
        }

        copy {
            from configTestFilePath
            into configFilePath
            include configFileName
        }
    }

    finalizedBy fatJar
    fatJar.finalizedBy testConfigRestore
}

task contractsServiceJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    include("**/ContractsService.java")
    destinationDir = file("../docs/ContractsService/javadoc")
}

task nodeJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    include("**/node2/Node.java")
    destinationDir = file("../docs/node/javadoc")
}

task allJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    options.doclet = "ExcludeDoclet"
    options.docletpath = [file("ExcludeDoclet.jar")]
    options.showFromProtected()
    destinationDir = file("../docs/javadoc")
    delete fileTree("../docs/javadoc")
}